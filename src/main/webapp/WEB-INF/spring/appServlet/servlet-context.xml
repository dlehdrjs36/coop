<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 스프링 MVC 어노테이션 자동 스캔 -->
    <context:component-scan base-package="com.projectteam.coop" />
    <!-- system.properties에서 시스템 관련 값 참조하도록 propertyConfigurer 설정. -->
    <context:property-placeholder location="classpath:props/system/*.properties" />
    <!-- 트랜잭션 어노테이션이 선언된 메소드는 transactionManager 라는 Bean 객체가 처리할 수 있도록 해준다.(@Transactional 어노테이션 처리) -->
    <tx:annotation-driven transaction-manager="txManager" />

<!--<mvc:resources mapping="/**" location="/resources/templates/" />-->

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<!--    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />-->
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="2" />
        <!-- 마지막 문자 jsp의 경우만 jsp 뷰리졸버 동작 -->
        <property name="viewNames" value="*Jsp" />
    </bean>
    <!-- thymeleaf 설정 -->
    <bean id="templateResolver" class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="classpath:" />
        <property name="suffix" value=".html" />
        <!-- HTML is the default value, added here for the sake of clarity.          -->
        <property name="templateMode" value="HTML" />
        <!-- Template cache is true by default. Set to false if you want             -->
        <!-- templates to be automatically updated when modified.                    -->
        <property name="cacheable" value="true" />
        <property name="characterEncoding" value="UTF-8" />
    </bean>
    <bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
        <property name="enableSpringELCompiler" value="true" />
    </bean>
    <bean class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding" value="UTF-8" />
        <property name="order" value="1" />
        <property name="viewNames" value="/templates/*" />
    </bean>
    <!-- //thymeleaf 설정 -->
    <!-- DBCP(HikariCP) -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.hikari.driverClassName}" />
        <property name="jdbcUrl" value="${spring.datasource.hikari.jdbcUrl}" />
        <property name="username" value="${spring.datasource.hikari.username}" />
        <property name="password" value="${spring.datasource.hikari.password}" />
    </bean>
    <!-- mybatis sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/config/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:mybatis/config/mapper/*.xml" />
    </bean>
    <!-- mybatis sqlSessionTemplate -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!-- 스프링 트랜잭션 관리 객체 등록 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource" />
    </bean>
    <!-- 트랜잭션 AOP 설정(특정 메소드가 호출되는 경우 자동으로 트랜잭션 처리) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="allpointcut" expression="execution(* com.projectteam..*Impl.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allpointcut" />
    </aop:config>
</beans>