<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- system.properties에서 시스템 관련 값 참조하도록 propertyConfigurer 설정. -->
    <context:property-placeholder location="classpath:props/system/*.properties" />

    <!-- bean 자동 등록 스캔 -->
    <context:component-scan base-package="com.projectteam.coop" />

    <!-- 트랜잭션 어노테이션이 선언된 메소드는 transactionManager 라는 Bean 객체가 처리할 수 있도록 해준다.(@Transactional 어노테이션 처리) -->
    <tx:annotation-driven transaction-manager="mybatisTxManager" />

    <!-- 스프링 MVC 어노테이션 자동 스캔 -->
    <mvc:annotation-driven />
    <!-- 스프링 MVC 인터셉터 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/css/**" />
            <mvc:exclude-mapping path="/js/**" />
            <mvc:exclude-mapping path="/img/**" />
            <bean class="com.projectteam.coop.web.interceptor.LogInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/" />
            <mvc:exclude-mapping path="/adminLogin" />
            <mvc:exclude-mapping path="/login" />
            <mvc:exclude-mapping path="/logout" />
            <mvc:exclude-mapping path="/members/new" />
            <mvc:exclude-mapping path="/tft/**" />
            <mvc:exclude-mapping path="/posts/**" />
            <mvc:exclude-mapping path="/orders/**" />
            <mvc:exclude-mapping path="/css/**" />
            <mvc:exclude-mapping path="/js/**" />
            <mvc:exclude-mapping path="/img/**" />
            <bean class="com.projectteam.coop.web.interceptor.LoginCheckInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 스프링 MVC ArgumentResolver -->
    <mvc:annotation-driven>
        <mvc:argument-resolvers>
            <bean class="com.projectteam.coop.web.argumentresolver.LoginMemberArgumentResolver"></bean>
            <bean class="com.projectteam.coop.web.argumentresolver.AdminLoginMemberArgumentResolver"></bean>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>
    <!-- DBCP(HikariCP) -->
    <bean id="mybatisDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.hikari.driverClassName}" />
        <property name="jdbcUrl" value="${spring.datasource.hikari.jdbcUrl}" />
        <property name="username" value="${spring.datasource.hikari.username}" />
        <property name="password" value="${spring.datasource.hikari.password}" />
    </bean>
    <!-- mybatis sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="mybatisDataSource" />
        <property name="configLocation" value="classpath:mybatis/config/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:mybatis/config/mapper/*.xml" />
    </bean>
    <!-- mybatis sqlSessionTemplate -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <!-- 스프링 트랜잭션 관리 객체 등록 -->
    <bean id="mybatisTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="mybatisDataSource" />
    </bean>
    <!-- 트랜잭션 AOP 설정(특정 메소드가 호출되는 경우 자동으로 트랜잭션 처리) -->
<!--    <tx:advice id="txAdvice" transaction-manager="mybatisTxManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="get*" read-only="true" />-->
<!--            <tx:method name="*" />-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="allpointcut" expression="execution(* com.projectteam..*Impl.*(..))" />-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="allpointcut" />-->
<!--    </aop:config>-->

    <!-- hibernate 설정 -->
    <!-- Jpa 예외 변환 AOP 설정. 이 AOP는 Jpa 예외를 스프링 프레임워크가 추상화한 예외로 변환해준다  -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <!-- datasource(운영 db, 실 서비스용) -->
    <bean id="mysqlDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.datasource.hikari.driverClassName}" />
        <property name="jdbcUrl" value="${spring.datasource.hikari.jdbcUrl}" />
        <property name="username" value="${spring.datasource.hikari.username}" />
        <property name="password" value="${spring.datasource.hikari.password}" />
    </bean>

    <!-- datasource(메모리 db, 테스트용) -->
    <bean id="h2DataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="${spring.h2datasource.hikari.driverClassName}" />
        <property name="jdbcUrl" value="${spring.h2datasource.hikari.jdbcUrl}" />
        <property name="username" value="${spring.h2datasource.hikari.username}" />
        <property name="password" value="${spring.h2datasource.hikari.password}" />
<!--        <property name="schema" value="classpath*:db/h2/schema.sql" />-->
    </bean>

    <!-- mysql JPA 트랜잭션 관리자 설정  -->
    <bean id="mysqlTxManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="persistenceUnitName" value="mysqlJpa" />
        <property name="dataSource" ref="mysqlDataSource" />
    </bean>

    <!-- h2 JPA 트랜잭션 관리자 설정 -->
    <bean id="h2TxManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="persistenceUnitName" value="h2Jpa"/>
        <property name="dataSource" ref="h2DataSource" />
    </bean>

    <!-- 서로 다른 DB가 하나의 트랜잭션으로 묶여서 동장해야한다면 JTA 관련해서 검색해보기 -->
    <!-- 현재는 서로 다른 DB 각각 개별로 트랜잭션이 돌고 있음 -->
    <!-- Jpa 엔티티 매니저 팩토리 등록(실서비스용, MySQL) -->
    <bean id="mysqlJpa" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="mysqlJpa"/>
        <property name="dataSource" ref="mysqlDataSource"/>
        <!-- @Entity 탐색 시작 위치 -->
        <property name="packagesToScan" value="com.projectteam.coop" />
        <property name="jpaVendorAdapter">
            <!-- 하이버네이트 구현체 사용 -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties"> <!-- 하이버네이트 상세설정 -->
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop> <!-- 방언 -->
                <!-- <prop key="hibernate.show_sql">true</prop> --> <!-- SQL 보기(System.out) 성능 안좋음. logback 으로 표시 -->
                <prop key="hibernate.format_sql">true</prop> <!-- SQL 보기 좋게 정리해서 출력 -->
                <prop key="hibernate.use_sql_comments">true</prop> <!-- SQL 코멘트 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop> <!-- JPA 표준에 맞춘 키 생성 전략여부 -->
<!--                <prop key="hibernate.hbm2ddl.auto">create</prop> &lt;!&ndash; DDL 자동생성 &ndash;&gt;-->
            </props>
        </property>
    </bean>

    <!-- Jpa 엔티티 매니저 팩토리 등록(테스트용, h2 메모리 데이터베이스) -->
    <bean id="h2Jpa" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="h2Jpa"/>
        <property name="dataSource" ref="h2DataSource" />
        <property name="packagesToScan" value="com.projectteam.coop" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop> <!-- 방언 -->
                <prop key="hibernate.format_sql">true</prop> <!-- SQL 보기 좋게 정리해서 출력 -->
                <prop key="hibernate.use_sql_comments">true</prop> <!-- SQL 코멘트 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop> <!-- JPA 표준에 맞춘 키 생성 전략여부 -->
                <prop key="hibernate.hbm2ddl.auto">create</prop> <!-- DDL 자동생성 -->
            </props>
        </property>
    </bean>
    <!-- hibernate 설정 종료 -->

    <!-- 예러 페이지 처리 설정 필요-->
<!--    <bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="defaultErrorView" value="classpath:/templates/error/error.html"/>-->
<!--        <property name="defaultStatusCode" value="200"/>-->
<!--    </bean>-->
    <!-- 스프링 메시지 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:/props/message/error</value>
            </list>
        </property>
        <property name="defaultEncoding" value="utf-8" />
        <property name="cacheSeconds" value="60" />
    </bean>
</beans>